This preview is generated by running
tail -n +1 */*

==> arrow-functions/input1.js <==
//assumption: #body# has no this, arguments, new.target, super.prop, super()
(#params#) => {#body#}

==> arrow-functions/output.js <==
(function (#params#) {
  #body#
});

==> async-to-generator/input1.js <==
async function f() {
  await #a#;
  return #b#;
}

==> async-to-generator/output1.js <==
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  } if (info.done) {
    resolve(value);
  } else { 
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this, args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);
      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }
      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }
      _next(undefined);
    });
  };
}

function f() {
  return _f.apply(this, arguments);
}

function _f() {
  _f = _asyncToGenerator(function* () {
    yield #a#;
    return #b#;
  });
  return _f.apply(this, arguments);
}


==> computed-properties-wrong/input1.js <==
o = {
  [k]: v
};

==> computed-properties-wrong/output1.js <==
var _o;

o = ((_o = {}), (_o[k] = v), _o);

==> computed-properties/input1.js <==
o = {
  [k]: v
};

==> computed-properties/output1.js <==
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}

o = _defineProperty({}, k, v);

==> exponentiation-operator/input1.txt <==
//assumption: no bigint
#a# ** #b#;

==> exponentiation-operator/output1.txt <==
Math.pow(#a#, #b#);

==> logical-assignment-operator-wrong/input1.js <==
#a# ||= #b#;

==> logical-assignment-operator-wrong/input2.js <==
#a# &&= #b#;

==> logical-assignment-operator-wrong/output1.js <==
#a# = #a# || #b#;

==> logical-assignment-operator-wrong/output2.js <==
#a# = #a# && #b#;

==> logical-assignment-operator/input1.js <==
//cond: #a# is not a property access
#a# ||= #b#;

==> logical-assignment-operator/input2.js <==
//cond: #a# is not a property access
#a# &&= #b#;

==> logical-assignment-operator/input3.js <==
#a#.p ||= #b#;

==> logical-assignment-operator/input4.js <==
#a#.p &&= #b#;

==> logical-assignment-operator/output1.js <==
#a# || (#a# = #b#);

==> logical-assignment-operator/output2.js <==
#a# && (#a# = #b#);

==> logical-assignment-operator/output3.js <==
(_a = #a#).p || (_a.p = #b#);

==> logical-assignment-operator/output4.js <==
(_a = #a#).p && (_a.p = #b#);

==> nullish-coalescing-operator-wrong/input1.js <==
#a# ?? #b#;

==> nullish-coalescing-operator-wrong/output1.js <==
#a# != null ? #a# : #b#;

==> nullish-coalescing-operator/input1.js <==
#a# ?? #b#;

==> nullish-coalescing-operator/output1.js <==
(_a = #a#) != null ? _a : #b#;

==> object-rest-spread-wrong/input1.js <==
let #o1# = {...#o2#};

==> object-rest-spread-wrong/output1.js <==
let #o1# = Object.assign({}, #o2#);

==> object-rest-spread/input1.js <==
let #o1# = {...#o2#};

==> object-rest-spread/input2.js <==
let {...#o1#} = #o2#;

==> object-rest-spread/input3.js <==
let {x, ...#o1#} = #o2#;

==> object-rest-spread/output1.js <==
function ownKeys(object) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }
  return keys;
}

function _objectSpread(target, source) {
  ownKeys(Object(source)).forEach(function (key) {
    _defineProperty(target, key, source[key]);
  })
  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}

#o1# = _objectSpread({}, #o2#);

==> object-rest-spread/output2.js <==
var _o = #o2#,
  #o1# = Object.assign({}, _o);


==> object-rest-spread/output3.js <==
function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}


let _o = #o2#, {x} = _o, #o1# = _objectWithoutProperties(_o, ["x"]);


==> optional-catch-binding/input1.js <==
try {
  #stmtlist1#
} catch {
  #stmtlist2#
}

==> optional-catch-binding/output1.js <==
try {
  #stmtlist1#
} catch(_unused) {
  #stmtlist2#
}

==> optional-chaining-wrong/input1.js <==
#obj#?.p;

==> optional-chaining-wrong/input2.js <==
#obj#?.p.q;

==> optional-chaining-wrong/output1.js <==
#obj# == null ? void 0 : #obj#.p;

==> optional-chaining-wrong/output2.js <==
var _obj;

((_obj = #obj#) == null ? void 0 : _obj.p).q;

==> optional-chaining/input1.js <==
#obj#?.p;

#obj#?.p.q;
#obj#.p?.q;
#obj#?.p?.q;

==> optional-chaining/input2.js <==
#f#?.();

#obj#?.f();
#obj#.f?.();
#obj#?.f?.();

==> optional-chaining/output1.js <==
var _obj, _obj2, _obj$p, _obj3, _obj3$p;

(_obj = #obj#) == null ? void 0 : _obj.p;
(_obj2 = #obj#) == null ? void 0 : _obj2.p.q;
(_obj$p = #obj#.p) == null ? void 0 : _obj$p.q;
(_obj3 = #obj#) == null
  ? void 0
  : (_obj3$p = _obj3.p) == null
  ? void 0
  : _obj3$p.q;


==> optional-chaining/output2.js <==
var _f, _obj, _obj$f, _obj2, _obj3, _obj3$f;

(_f = #f#) == null ? void 0 : _f();
(_obj = #obj#) == null ? void 0 : _obj.f();
(_obj$f = (_obj2 = #obj#).f) == null ? void 0 : _obj$f.call(_obj2);
(_obj3 = #obj#) == null
  ? void 0
  : (_obj3$f = _obj3.f) == null
  ? void 0
  : _obj3$f.call(_obj3);


==> transform-destructuring-wrong/input1.txt <==
let {#a#, #b#} = #o#;

==> transform-destructuring-wrong/input2.txt <==
let [#a#, #b#] = #arr#;

==> transform-destructuring-wrong/output1.txt <==
var #a# = #o#.#a#,
  #b# = #o#.#b#;

==> transform-destructuring-wrong/output2.txt <==
var _arr = #arr#,
  #a# = _arr[0],
  #b# = _arr[1];

==> transform-destructuring/input1.txt <==
let {#a#, #b#} = #o#;

==> transform-destructuring/output1.txt <==
var _o = #o#,
  #a# = _o.#a#,
  #b# = _o.#b#;

==> typeof-symbol/input1.txt <==
typeof #x#;

==> typeof-symbol/output1.txt <==
function _typeof(obj) {
  "@babel/helpers - typeof";
  return (
    (_typeof =
      "function" == typeof Symbol && "symbol" == typeof Symbol.iterator
        ? function (obj) {
            return typeof obj;
          }
        : function (obj) {
            return obj &&
              "function" == typeof Symbol &&
              obj.constructor === Symbol &&
              obj !== Symbol.prototype
              ? "symbol"
              : typeof obj;
          }),
    _typeof(obj)
  );
}

_typeof(#x#);
